// Generated by CoffeeScript 1.10.0
(function() {
  var AMQPConsumer, BaseApp, BaseConsumerApp, HOMEDIR, IS_INSTRUMENTED, LIB_DIR, config, fs, path,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  path = require('path');

  fs = require('fs');

  HOMEDIR = path.join(__dirname, '..', '..');

  IS_INSTRUMENTED = fs.existsSync(path.join(HOMEDIR, 'lib-cov'));

  LIB_DIR = IS_INSTRUMENTED ? path.join(HOMEDIR, 'lib-cov') : path.join(HOMEDIR, 'lib');

  AMQPConsumer = require(path.join(LIB_DIR, 'amqp-consumer')).AMQPConsumer;

  BaseApp = require(path.join(LIB_DIR, 'util', 'base-app')).BaseApp;

  config = require('inote-util').config.init();

  BaseConsumerApp = (function(superClass) {
    extend(BaseConsumerApp, superClass);

    BaseConsumerApp.prototype.consumer = null;

    function BaseConsumerApp(config_key) {
      var ref, ref1, ref2, ref3, ref4, ref5, ref6;
      if (config_key == null) {
        config_key = "amqp:consumer";
      }
      this.main = bind(this.main, this);
      this.subscribe_consumer = bind(this.subscribe_consumer, this);
      this.connect_consumer = bind(this.connect_consumer, this);
      this.init_consumer = bind(this.init_consumer, this);
      this.default_broker_url = (ref = config.get(config_key + ":broker")) != null ? ref : 'amqp://guest:guest@localhost:5672';
      this.default_connection_options = (ref1 = config.get(config_key + ":connection-options")) != null ? ref1 : null;
      this.default_exchange_name = (ref2 = config.get(config_key + ":exchange")) != null ? ref2 : "";
      this.default_key_pattern = (ref3 = config.get(config_key + ":key-pattern")) != null ? ref3 : '*';
      this.default_queue_name = (ref4 = config.get(config_key + ":queue")) != null ? ref4 : null;
      this.default_queue_options = (ref5 = config.get(config_key + ":queue-options")) != null ? ref5 : null;
      this.default_subscription_options = (ref6 = config.get(config_key + ":subscription-options")) != null ? ref6 : null;
    }

    BaseConsumerApp.prototype.init_options = function() {
      BaseConsumerApp.__super__.init_options.call(this);
      this.options.b = {
        alias: 'broker',
        "default": this.default_broker_url,
        describe: "Message broker to connect to"
      };
      this.options.B = {
        alias: 'connection-options',
        "default": this.default_connection_options,
        describe: "JSON-string representation of connection (broker) options."
      };
      this.options.q = {
        alias: 'queue',
        "default": this.default_queue_name,
        describe: "Queue to subscribe to."
      };
      this.options.Q = {
        alias: 'queue-options',
        "default": this.default_queue_options,
        describe: "JSON-string representation of queue options."
      };
      this.options.S = {
        alias: 'subscription-options',
        "default": this.default_subscription_options,
        describe: "JSON-string representation of subscription options."
      };
      this.options.k = {
        alias: 'key-pattern',
        "default": this.default_key_pattern,
        describe: "Routing key pattern (used when binding to an exchange)"
      };
      return this.options.e = {
        alias: 'exchange',
        "default": this.default_exchange_name,
        describe: "Exchange to bind to (optional)."
      };
    };

    BaseConsumerApp.prototype.init_consumer = function() {
      return this.consumer = new AMQPConsumer();
    };

    BaseConsumerApp.prototype.connect_consumer = function(callback) {
      var broker, connection_options, queue, queue_options;
      if (this.consumer == null) {
        this.init_consumer();
      }
      broker = this.argv.broker;
      connection_options = this.json_string_to_object(this.argv['connection-options']);
      queue = this.argv.queue;
      queue_options = this.json_string_to_object(this.argv['queue-options']);
      return this.consumer.connect(broker, connection_options, queue, queue_options, callback);
    };

    BaseConsumerApp.prototype.subscribe_consumer = function(callback) {
      var exchange, key_pattern, options;
      exchange = this.argv.exchange;
      key_pattern = this.argv['key-pattern'];
      if (this.argv['subscription-options'] != null) {
        options = this.argv['subscription-options'];
      }
      return this.consumer.subscribe(exchange, key_pattern, options, this.handle_message, callback);
    };

    BaseConsumerApp.prototype.main = function(callback) {
      BaseConsumerApp.__super__.main.call(this);
      this.init_consumer();
      if (this.argv.verbose) {
        console.log("Connecting.");
      }
      return this.connect_consumer((function(_this) {
        return function() {
          if (_this.argv.verbose) {
            console.log("Connected.");
          }
          return _this.subscribe_consumer(function() {
            if (_this.argv.verbose) {
              console.log("Subscribed.");
            }
            return typeof callback === "function" ? callback() : void 0;
          });
        };
      })(this));
    };

    BaseConsumerApp.prototype.handle_message = function(message, headers, info, raw) {};

    return BaseConsumerApp;

  })(BaseApp);

  exports.BaseConsumerApp = BaseConsumerApp;

  if (require.main === module) {
    (new BaseConsumerApp()).main();
  }

}).call(this);
