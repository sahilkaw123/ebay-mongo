// Generated by CoffeeScript 1.10.0
(function() {
  var AMQPProducer, BaseApp, BaseProducerApp, HOMEDIR, IS_INSTRUMENTED, LIB_DIR, config, fs, path,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  path = require('path');

  fs = require('fs');

  HOMEDIR = path.join(__dirname, '..', '..');

  IS_INSTRUMENTED = fs.existsSync(path.join(HOMEDIR, 'lib-cov'));

  LIB_DIR = IS_INSTRUMENTED ? path.join(HOMEDIR, 'lib-cov') : path.join(HOMEDIR, 'lib');

  AMQPProducer = require(path.join(LIB_DIR, 'amqp-producer')).AMQPProducer;

  BaseApp = require(path.join(LIB_DIR, 'util', 'base-app')).BaseApp;

  config = require('inote-util').config.init();

  BaseProducerApp = (function(superClass) {
    extend(BaseProducerApp, superClass);

    BaseProducerApp.prototype.producer = null;

    function BaseProducerApp(config_key) {
      var ref, ref1, ref2, ref3, ref4, ref5;
      if (config_key == null) {
        config_key = "amqp:producer";
      }
      this.main = bind(this.main, this);
      this.connect_producer = bind(this.connect_producer, this);
      this.init_producer = bind(this.init_producer, this);
      this.publish_message = bind(this.publish_message, this);
      this.default_broker_url = (ref = config.get(config_key + ":broker")) != null ? ref : 'amqp://guest:guest@localhost:5672';
      this.default_connection_options = (ref1 = config.get(config_key + ":connection-options")) != null ? ref1 : null;
      this.default_exchange_name = (ref2 = config.get(config_key + ":exchange")) != null ? ref2 : "";
      this.default_exchange_options = (ref3 = config.get(config_key + ":exchange-options")) != null ? ref3 : null;
      this.default_routing_key = (ref4 = config.get(config_key + ":routing-key")) != null ? ref4 : 'amqp-test-key';
      this.default_publishing_options = (ref5 = config.get(config_key + ":publishing-options")) != null ? ref5 : null;
    }

    BaseProducerApp.prototype.init_options = function() {
      BaseProducerApp.__super__.init_options.call(this);
      this.options.b = {
        alias: 'broker',
        "default": this.default_broker_url,
        describe: "Message broker to connect to"
      };
      this.options.B = {
        alias: 'connection-options',
        describe: "JSON-string representation of connection (broker) options.",
        "default": this.default_connection_options
      };
      this.options.e = {
        alias: 'exchange',
        "default": this.default_exchange_name,
        describe: "Exchange to publish to."
      };
      this.options.E = {
        alias: 'exchange-options',
        describe: "JSON-string representation of exchange options.",
        "default": this.default_exchange_options
      };
      this.options.O = {
        alias: 'publishing-options',
        describe: "JSON-string representation of publishing options (such as headers).",
        "default": this.default_publishing_options
      };
      return this.options.k = {
        alias: 'routing-key',
        describe: "Default routing key.",
        "default": this.default_routing_key
      };
    };

    BaseProducerApp.prototype.publish_message = function(body, key, pub_options) {
      if (pub_options == null) {
        pub_options = this.argv['publishing-options'];
      }
      if (key == null) {
        key = this.argv['routing-key'];
      }
      if (this.argv.verbose) {
        console.log("Publishing:", body, key, pub_options);
      }
      return this.producer.publish(body, key, pub_options);
    };

    BaseProducerApp.prototype.init_producer = function() {
      return this.producer = new AMQPProducer();
    };

    BaseProducerApp.prototype.connect_producer = function(callback) {
      var broker, connection_options, exchange, exchange_options;
      if (this.producer == null) {
        this.init_producer();
      }
      broker = this.argv.broker;
      exchange = this.argv.exchange;
      connection_options = this.json_string_to_object(this.argv['connection-options']);
      exchange_options = this.json_string_to_object(this.argv['exchange-options']);
      return this.producer.connect(broker, connection_options, exchange, exchange_options, callback);
    };

    BaseProducerApp.prototype.main = function(callback) {
      BaseProducerApp.__super__.main.call(this);
      this.init_producer();
      return this.connect_producer((function(_this) {
        return function() {
          if (_this.argv.verbose) {
            console.log("Connected.");
          }
          return typeof callback === "function" ? callback() : void 0;
        };
      })(this));
    };

    return BaseProducerApp;

  })(BaseApp);

  exports.BaseProducerApp = BaseProducerApp;

  if (require.main === module) {
    (new BaseProducerApp()).main();
  }

}).call(this);
