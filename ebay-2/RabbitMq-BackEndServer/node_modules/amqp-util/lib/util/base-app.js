// Generated by CoffeeScript 1.10.0
(function() {
  var BaseApp, optimist,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  optimist = require('optimist');

  BaseApp = (function() {
    function BaseApp() {
      this.main = bind(this.main, this);
      this.json_string_to_object = bind(this.json_string_to_object, this);
      this.on_env = bind(this.on_env, this);
      this.on_interrupt = bind(this.on_interrupt, this);
      this.init_argv = bind(this.init_argv, this);
      this.init_options = bind(this.init_options, this);
    }

    BaseApp.prototype.options = null;

    BaseApp.prototype.argv = null;

    BaseApp.prototype.init_options = function() {
      return this.options = {
        h: {
          describe: "Show help.",
          boolean: true,
          "default": false,
          alias: 'help'
        },
        verbose: {
          describe: "Be more chatty.",
          boolean: true,
          "default": false
        },
        quiet: {
          describe: "Be less chatty.",
          boolean: true,
          "default": false
        },
        env: {
          describe: "Print my configuration.",
          boolean: true,
          "default": false
        }
      };
    };

    BaseApp.prototype.init_argv = function() {
      this.argv = optimist.options(this.options).usage('Usage: $0 [OPTIONS]').argv;
      if (this.argv.quiet && this.argv.verbose) {
        return this.argv.verbose = this.argv.v = false;
      }
    };

    BaseApp.prototype.on_interrupt = function(signal) {
      if (signal === 'SIGINT') {
        if (!this.argv.quiet) {
          console.log('Received kill signal (SIGINT), shutting down.');
        }
        return process.exit();
      }
    };

    BaseApp.prototype.on_help = function() {
      optimist.showHelp();
      return process.exit();
    };

    BaseApp.prototype.on_env = function() {
      console.log("Current Configuration:");
      return console.log(this.argv);
    };

    BaseApp.prototype.json_string_to_object = function(value) {
      if (typeof value === 'string' && /^\s*((\".*\")|(\[.*\])(\{.*\}))\s*$/.test(value)) {
        return JSON.parse(value);
      } else {
        return value;
      }
    };

    BaseApp.prototype.main = function(callback) {
      if (this.options == null) {
        this.init_options();
      }
      if (this.argv == null) {
        this.init_argv();
      }
      if (this.argv.env) {
        this.on_env();
      }
      if (this.argv.help) {
        this.on_help();
      }
      process.on('SIGINT', (function(_this) {
        return function() {
          return _this.on_interrupt('SIGINT');
        };
      })(this));
      return typeof callback === "function" ? callback() : void 0;
    };

    return BaseApp;

  })();

  exports.BaseApp = BaseApp;

  if (require.main === module) {
    (new BaseApp()).main();
  }

}).call(this);
