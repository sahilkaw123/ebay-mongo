// Generated by CoffeeScript 1.10.0
(function() {
  var BaseProducerApp, HOMEDIR, IS_INSTRUMENTED, LIB_DIR, PublishMessage, fs, path,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  path = require('path');

  fs = require('fs');

  HOMEDIR = path.join(__dirname, '..', '..');

  IS_INSTRUMENTED = fs.existsSync(path.join(HOMEDIR, 'lib-cov'));

  LIB_DIR = IS_INSTRUMENTED ? path.join(HOMEDIR, 'lib-cov') : path.join(HOMEDIR, 'lib');

  BaseProducerApp = require(path.join(LIB_DIR, 'util', 'base-producer-app')).BaseProducerApp;

  PublishMessage = (function(superClass) {
    extend(PublishMessage, superClass);

    function PublishMessage(config_key) {
      PublishMessage.__super__.constructor.call(this, config_key);
    }

    PublishMessage.prototype.init_options = function() {
      PublishMessage.__super__.init_options.call(this);
      return this.options.m = {
        alias: 'message',
        describe: "JSON representation of the message to publish."
      };
    };

    PublishMessage.prototype.main = function(callback) {
      return PublishMessage.__super__.main.call(this, (function(_this) {
        return function() {
          var err, error, key, message, pub_options;
          if (!_this.argv.quiet) {
            console.log("Connected to broker at \"" + _this.argv.broker + "\".");
          }
          key = _this.argv['routing-key'];
          pub_options = _this.argv['publishing-options'];
          message = _this.argv.message;
          if (/^\s*\{|\[/.test(message) && /\}|\]\s*$/.test(message)) {
            try {
              message = JSON.parse(message);
            } catch (error) {
              err = error;
              message = message;
            }
          }
          _this.publish_message(message, key, pub_options);
          if (!_this.argv.quiet) {
            console.log("Published the payload \"" + (JSON.stringify(message)) + "\" using the routing key \"" + key + "\" to the exchange named \"" + _this.argv.exchange + "\".");
          }
          return typeof callback === "function" ? callback() : void 0;
        };
      })(this));
    };

    return PublishMessage;

  })(BaseProducerApp);

  exports.PublishMessage = PublishMessage;

  if (require.main === module) {
    (new PublishMessage()).main((function(_this) {
      return function() {
        return process.exit();
      };
    })(this));
  }

}).call(this);
