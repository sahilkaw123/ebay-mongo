// Generated by CoffeeScript 1.10.0
(function() {
  var AMQPStringConsumer, BaseConsumerApp, HOMEDIR, IS_INSTRUMENTED, LIB_DIR, LoggingListener, fs, path,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  path = require('path');

  fs = require('fs');

  HOMEDIR = path.join(__dirname, '..', '..');

  IS_INSTRUMENTED = fs.existsSync(path.join(HOMEDIR, 'lib-cov'));

  LIB_DIR = IS_INSTRUMENTED ? path.join(HOMEDIR, 'lib-cov') : path.join(HOMEDIR, 'lib');

  BaseConsumerApp = require(path.join(LIB_DIR, 'util', 'base-consumer-app')).BaseConsumerApp;

  AMQPStringConsumer = require(path.join(LIB_DIR, 'amqp-consumer')).AMQPStringConsumer;

  LoggingListener = (function(superClass) {
    extend(LoggingListener, superClass);

    function LoggingListener(config_key) {
      this.main = bind(this.main, this);
      this.init_consumer = bind(this.init_consumer, this);
      this.init_options = bind(this.init_options, this);
      this.handle_message = bind(this.handle_message, this);
      LoggingListener.__super__.constructor.call(this, config_key);
    }

    LoggingListener.prototype.count = 0;

    LoggingListener.prototype.handle_message = function(message, headers, deliveryInfo, raw) {
      var parts;
      this.count += 1;
      parts = [];
      if (this.argv.count) {
        parts.push("[#" + this.count + "]");
      }
      if (this.argv.timestamp) {
        parts.push("[" + ((new Date()).toISOString()) + "]");
      }
      if (this.argv.message) {
        if (this.jsonify) {
          parts.push(JSON.stringify(message));
        } else {
          parts.push(message);
        }
      }
      if (this.argv.headers) {
        if (this.jsonify) {
          parts.push(JSON.stringify(headers));
        } else {
          parts.push(headers);
        }
      }
      if (this.argv.info) {
        if (this.jsonify) {
          parts.push(JSON.stringify(deliveryInfo));
        } else {
          parts.push(deliveryInfo);
        }
      }
      return console.log.apply(console, parts);
    };

    LoggingListener.prototype.init_options = function() {
      LoggingListener.__super__.init_options.call(this);
      this.options.M = {
        alias: 'message',
        "default": true,
        boolean: true,
        describe: "Include message body in output"
      };
      this.options.H = {
        alias: 'headers',
        "default": false,
        boolean: true,
        describe: "Include message headers in output"
      };
      this.options.I = {
        alias: 'info',
        "default": false,
        boolean: true,
        describe: "Include delivery info in output"
      };
      this.options.T = {
        alias: 'timestamp',
        "default": true,
        boolean: true,
        describe: "Include timestamp in output"
      };
      this.options.C = {
        alias: 'count',
        "default": false,
        boolean: true,
        describe: "Show count"
      };
      return this.options.j = {
        alias: 'jsonify',
        "default": true,
        boolean: true,
        describe: "Convert message contents into a JSON string"
      };
    };

    LoggingListener.prototype.init_consumer = function() {
      return this.consumer = new AMQPStringConsumer();
    };

    LoggingListener.prototype.main = function() {
      return LoggingListener.__super__.main.call(this, (function(_this) {
        return function() {
          if (!_this.argv.quiet) {
            console.log("LoggingListener connected to broker at \"" + _this.argv.broker + "\" and now listening for messages on queue \"" + _this.argv.queue + "\".");
            return console.log("Press Ctrl-C to exit.");
          }
        };
      })(this));
    };

    return LoggingListener;

  })(BaseConsumerApp);

  exports.LoggingListener = LoggingListener;

  if (require.main === module) {
    (new LoggingListener()).main();
  }

}).call(this);
