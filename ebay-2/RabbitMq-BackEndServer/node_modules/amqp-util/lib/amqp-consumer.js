// Generated by CoffeeScript 1.10.0
(function() {
  var AMQPConsumer, AMQPStringConsumer, amqp, broker, consumer, queue, ref, ref1, ref2, ref3,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    slice = [].slice,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  amqp = require('amqp');

  AMQPConsumer = (function() {
    function AMQPConsumer() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      this.main = bind(this.main, this);
      this.message_converter = bind(this.message_converter, this);
      this.unsubscribe = bind(this.unsubscribe, this);
      this.bind = bind(this.bind, this);
      this._inner_subscribe = bind(this._inner_subscribe, this);
      this.subscribe = bind(this.subscribe, this);
      this.connect = bind(this.connect, this);
      if ((args != null) && args.length > 0) {
        this.connect.apply(this, args);
      }
    }

    AMQPConsumer.prototype.connect = function() {
      var args, callback, connection, connection_options, queue, queue_options;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      connection = args.shift();
      if (args.length > 0 && ((args[0] == null) || typeof args[0] === 'object')) {
        connection_options = args.shift();
      }
      if (args.length > 0 && ((args[0] == null) || typeof args[0] === 'string')) {
        queue = args.shift();
      }
      if (args.length > 0 && ((args[0] == null) || typeof args[0] === 'object')) {
        queue_options = args.shift();
      } else {
        queue_options = {};
      }
      if (args.length > 0 && ((args[0] == null) || typeof args[0] === 'function')) {
        callback = args.shift();
      }
      this.connection = amqp.createConnection({
        url: connection
      }, connection_options);
      this.connection.on('error', (function(_this) {
        return function(err) {
          return console.log("error", err);
        };
      })(this));
      return this.connection.once('ready', (function(_this) {
        return function() {
          return _this.queue = _this.connection.queue(queue, queue_options, function() {
            var response;
            response = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            return typeof callback === "function" ? callback.apply(null, [null].concat(slice.call(response))) : void 0;
          });
        };
      })(this));
    };

    AMQPConsumer.prototype.subscribe = function() {
      var args, callback, done, exchange_name, pattern, subscribe_options;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      if (args.length > 0 && ((args[0] == null) || typeof args[0] === 'string')) {
        exchange_name = args.shift();
      }
      if (args.length > 0 && ((args[0] == null) || typeof args[0] === 'string')) {
        pattern = args.shift();
      }
      if (args.length > 0 && ((args[0] == null) || typeof args[0] === 'object')) {
        subscribe_options = args.shift();
      }
      if (args.length > 0 && ((args[0] == null) || typeof args[0] === 'function')) {
        callback = args.shift();
      }
      if (args.length > 0 && ((args[0] == null) || typeof args[0] === 'function')) {
        done = args.shift();
      }
      if (exchange_name != null) {
        return this.bind(exchange_name, pattern, (function(_this) {
          return function() {
            return _this._inner_subscribe(subscribe_options, callback, done);
          };
        })(this));
      } else {
        return this._inner_subscribe(subscribe_options, callback, done);
      }
    };

    AMQPConsumer.prototype._inner_subscribe = function(subscribe_options, callback, done) {
      this.queue.once('basicConsumeOk', (function(_this) {
        return function() {
          return typeof done === "function" ? done() : void 0;
        };
      })(this));
      return this.queue.subscribe(subscribe_options, (function(_this) {
        return function() {
          var h, i, m, x;
          m = arguments[0], h = arguments[1], i = arguments[2], x = 4 <= arguments.length ? slice.call(arguments, 3) : [];
          return callback.apply(null, [_this.message_converter(m), h, i].concat(slice.call(x)));
        };
      })(this)).addCallback((function(_this) {
        return function(ok) {
          return _this.consumer_tag = ok.consumerTag;
        };
      })(this));
    };

    AMQPConsumer.prototype.bind = function(exchange_name, pattern, callback) {
      this.queue.once('queueBindOk', (function(_this) {
        return function() {
          return callback();
        };
      })(this));
      return this.queue.bind(exchange_name, pattern);
    };

    AMQPConsumer.prototype.unsubscribe = function(callback) {
      var err, error;
      try {
        return this.queue.unsubscribe(this.consumer_tag).addCallback((function(_this) {
          return function() {
            _this.consumer_tag = null;
            return typeof callback === "function" ? callback() : void 0;
          };
        })(this));
      } catch (error) {
        err = error;
        return typeof callback === "function" ? callback(err) : void 0;
      }
    };

    AMQPConsumer.prototype.message_converter = function(msg) {
      return msg;
    };

    AMQPConsumer.prototype.main = function(options) {
      if (options == null) {
        options = {};
      }
      return process.on('SIGINT', (function(_this) {
        return function() {
          var err, error;
          if (!(options != null ? options.silent : void 0)) {
            console.log('Received kill signal (SIGINT), shutting down.');
          }
          try {
            _this.unsubscribe(function() {
              _this.connection.end();
              if (!(options != null ? options.silent : void 0)) {
                console.log('Connection closed.');
              }
              return process.exit();
            });
          } catch (error) {
            err = error;
            console.error(err);
          }
          return setTimeout(function() {
            if (!(options != null ? options.silent : void 0)) {
              console.error("Unable to close connection in time. Forcefully shutting down.");
            }
            return process.exit(1);
          }, 5 * 1000);
        };
      })(this));
    };

    return AMQPConsumer;

  })();

  AMQPStringConsumer = (function(superClass) {
    extend(AMQPStringConsumer, superClass);

    function AMQPStringConsumer(encoding, connection, connection_options, queue, queue_options, callback) {
      this.encoding = encoding;
      this.message_converter = bind(this.message_converter, this);
      if (typeof queue_options === 'function' && (callback == null)) {
        callback = queue_options;
        queue_options = queue;
        queue = connection_options;
        connection_options = connection;
        connection = this.encoding;
        this.encoding = null;
      }
      if ((connection != null) || (queue != null)) {
        AMQPStringConsumer.__super__.constructor.call(this, connection, connection_options, queue, queue_options, callback);
      } else {
        AMQPStringConsumer.__super__.constructor.call(this);
      }
    }

    AMQPStringConsumer.prototype.message_converter = function(msg) {
      if (msg.data instanceof Buffer) {
        msg = msg.data.toString(this.encoding);
      }
      return msg;
    };

    return AMQPStringConsumer;

  })(AMQPConsumer);

  exports.AMQPConsumer = AMQPConsumer;

  exports.AMQPStringConsumer = AMQPStringConsumer;

  exports.AMQPJSONConsumer = AMQPConsumer;

  if (require.main === module) {
    broker = (ref = ((ref1 = process.argv) != null ? ref1[2] : void 0)) != null ? ref : 'amqp://guest:guest@localhost:5672';
    queue = (ref2 = ((ref3 = process.argv) != null ? ref3[3] : void 0)) != null ? ref2 : 'namqp-demo-queue';
    consumer = new AMQPConsumer(broker, null, queue, {}, (function(_this) {
      return function() {
        return consumer.subscribe(console.log, function() {
          console.log("AMQPConsumer connected to broker at \"" + broker + "\" and now listening for messages on queue \"" + queue + "\".");
          console.log("Press Ctrl-C to exit.");
          return consumer.main();
        });
      };
    })(this));
  }

}).call(this);
