// Generated by CoffeeScript 1.10.0
(function() {
  var AMQPProducer, amqp, broker, exchange, key, payload, producer, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    slice = [].slice;

  amqp = require('amqp');

  AMQPProducer = (function() {
    function AMQPProducer() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      this.on_error = bind(this.on_error, this);
      this.publish = bind(this.publish, this);
      this.payload_converter = bind(this.payload_converter, this);
      this.set_default_publish_header = bind(this.set_default_publish_header, this);
      this.set_default_publish_option = bind(this.set_default_publish_option, this);
      this.connect = bind(this.connect, this);
      if ((args != null) && args.length > 0) {
        this.connect.apply(this, args);
      }
    }

    AMQPProducer.prototype.connect = function() {
      var args, broker_url, callback, connection_options, exchange_name, exchange_options;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      broker_url = args.shift();
      if (args.length > 0 && ((args[0] == null) || typeof args[0] === 'object')) {
        connection_options = args.shift();
      }
      if (args.length > 0 && ((args[0] == null) || typeof args[0] === 'string')) {
        exchange_name = args.shift();
      }
      if (args.length > 0 && ((args[0] == null) || typeof args[0] === 'object')) {
        exchange_options = args.shift();
      }
      if (args.length > 0 && ((args[0] == null) || typeof args[0] === 'function')) {
        callback = args.shift();
      }
      this.connection = amqp.createConnection({
        url: broker_url
      }, connection_options);
      return this.connection.once('ready', (function(_this) {
        return function() {
          _this.exchange = _this.connection.exchange(exchange_name, exchange_options);
          _this.exchange.on('error', _this.on_error);
          return _this.exchange.once("open", function() {
            return typeof callback === "function" ? callback(null, _this) : void 0;
          });
        };
      })(this));
    };

    AMQPProducer.prototype.default_routing_key = null;

    AMQPProducer.prototype.default_publish_options = null;

    AMQPProducer.prototype.set_default_publish_option = function(name, value) {
      if (this.default_publish_options == null) {
        this.default_publish_options = {};
      }
      return this.default_publish_options[name] = value;
    };

    AMQPProducer.prototype.set_default_publish_header = function(name, value) {
      var base;
      if (this.default_publish_options == null) {
        this.default_publish_options = {};
      }
      if ((base = this.default_publish_options).headers == null) {
        base.headers = {};
      }
      return this.default_publish_options.headers[name] = value;
    };

    AMQPProducer.prototype.payload_converter = function(payload) {
      return payload;
    };

    AMQPProducer.prototype.publish = function(payload, routing_key, options, callback) {
      if (callback == null) {
        if (typeof options === 'function') {
          callback = options;
          options = null;
        } else if (typeof routing_key === 'function' && (options == null)) {
          callback = routing_key;
          routing_key = null;
        }
      }
      if (routing_key == null) {
        routing_key = this.default_routing_key;
      }
      if (options == null) {
        options = this.default_publish_options;
      }
      payload = this.payload_converter(payload);
      return this.exchange.publish(routing_key, payload, options, (function(_this) {
        return function(error_occured) {
          if (error_occured) {
            return typeof callback === "function" ? callback(error_occured) : void 0;
          } else {
            return typeof callback === "function" ? callback(null) : void 0;
          }
        };
      })(this));
    };

    AMQPProducer.prototype.on_error = function(err) {
      return console.error("AMQPProducer encountered error", err);
    };

    return AMQPProducer;

  })();

  exports.AMQPProducer = AMQPProducer;

  if (require.main === module) {
    payload = (ref = ((ref1 = process.argv) != null ? ref1[2] : void 0)) != null ? ref : 'Example Payload';
    key = (ref2 = ((ref3 = process.argv) != null ? ref3[3] : void 0)) != null ? ref2 : 'amqp-demo-queue';
    exchange = (ref4 = ((ref5 = process.argv) != null ? ref5[4] : void 0)) != null ? ref4 : '';
    broker = (ref6 = ((ref7 = process.argv) != null ? ref7[5] : void 0)) != null ? ref6 : 'amqp://guest:guest@localhost:5672';
    producer = new AMQPProducer(broker, null, exchange, {
      confirm: true
    }, (function(_this) {
      return function() {
        console.log("AMQPProducer connected to broker at \"" + broker + "\".");
        producer.publish({
          payload: payload
        }, key, {}, function() {
          return console.log("Confirmed.");
        });
        console.log("AMQPProducer published the payload \"" + payload + "\" using the routing key \"" + key + "\" to the exchange named \"" + exchange + "\".");
        return process.exit();
      };
    })(this));
  }

}).call(this);
