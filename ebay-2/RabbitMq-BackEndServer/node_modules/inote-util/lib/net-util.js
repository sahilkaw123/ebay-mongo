// Generated by CoffeeScript 1.10.0
(function() {
  var DEBUG, HOMEDIR, LIB_COV, LIB_DIR, NetUtil, Util, cluster, fs, net, path, ref, ref1, shell;

  fs = require('fs');

  path = require('path');

  HOMEDIR = path.join(__dirname, '..');

  LIB_COV = path.join(HOMEDIR, 'lib-cov');

  LIB_DIR = fs.existsSync(LIB_COV) ? LIB_COV : path.join(HOMEDIR, 'lib');

  Util = require(path.join(LIB_DIR, 'util')).Util;

  shell = require('shelljs');

  cluster = require('cluster');

  net = require('net');

  DEBUG = (/(^|,)inote-?util($|,)/i.test(typeof process !== "undefined" && process !== null ? (ref = process.env) != null ? ref.NODE_DEBUG : void 0 : void 0)) || (/(^|,)NetUtil($|,)/.test(typeof process !== "undefined" && process !== null ? (ref1 = process.env) != null ? ref1.NODE_DEBUG : void 0 : void 0));

  NetUtil = (function() {
    function NetUtil() {}

    NetUtil.get_pid = function() {
      var ref2, ref3, ref4, ref5;
      if (NetUtil.random_pid == null) {
        NetUtil.random_pid = Math.round(Math.random() * 32768);
      }
      return (ref2 = (ref3 = cluster != null ? (ref4 = cluster.worker) != null ? (ref5 = ref4.process) != null ? ref5.pid : void 0 : void 0 : void 0) != null ? ref3 : typeof process !== "undefined" && process !== null ? process.pid : void 0) != null ? ref2 : NetUtil.random_pid;
    };

    NetUtil.random_port = function(min, range) {
      if (min == null) {
        min = 2000;
      }
      if (range == null) {
        range = 1000;
      }
      return min + Math.round(Math.random() * range);
    };

    NetUtil.get_unused_port = function() {
      var base_port, command, err, error, output, port, ref2;
      base_port = 2000 + (NetUtil.get_pid() % 10000);
      command = "for port in $(seq " + base_port + " 65000); do echo -ne \"\\035\" | telnet 127.0.0.1 $port > /dev/null 2>&1; [ $? -eq 1 ] && echo \"$port\" && break; done";
      port = null;
      try {
        output = shell.exec(command, {
          silent: true
        });
        port = Util.to_int(output != null ? (ref2 = output.output) != null ? ref2.trim() : void 0 : void 0);
      } catch (error) {
        err = error;
        console.error("ERROR in NetUtil.get_unused_port: ", err);
      }
      if (port == null) {
        port = NetUtil.random_port();
      }
      return port;
    };

    NetUtil.is_port_in_use = function(port, callback) {
      var server;
      server = net.createServer();
      server.once("error", function(err) {
        if ((err != null) && err.code === 'EADDRINUSE') {
          return callback(null, true);
        } else {
          return callback(err);
        }
      });
      server.once("listening", function() {
        server.once("close", function() {
          return callback(null, false);
        });
        return server.close();
      });
      return server.listen(port);
    };

    return NetUtil;

  })();

  exports.NetUtil = NetUtil;

}).call(this);
